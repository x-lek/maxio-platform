version: "3.7"
services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.4.2
    container_name: elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
      - ELASTIC_PASSWORD=password
      - xpack.security.authc.token.enabled=true
#      - xpack.security.http.ssl.certificate_authorities=/usr/share/elasticsearch/data/server.crt.pem
      - xpack.security.dls_fls.enabled=true
      - xpack.security.authc.realms.native.native1.order=1
      - xpack.security.authc.realms.oidc.oidc1.order=2
      - xpack.security.authc.realms.oidc.oidc1.rp.client_id=kibana
      - xpack.security.authc.realms.oidc.oidc1.rp.response_type=code
      - xpack.security.authc.realms.oidc.oidc1.rp.redirect_uri=http://kibana:5601/api/security/oidc/callback
      - xpack.security.authc.realms.oidc.oidc1.rp.post_logout_redirect_uri=http://kibana:5601/login?msg=LOGGED_OUT
      - xpack.security.authc.realms.oidc.oidc1.rp.requested_scopes=openid
      - xpack.security.authc.realms.oidc.oidc1.op.issuer=http://keycloak:8080/auth/realms/elasticsearch
      - xpack.security.authc.realms.oidc.oidc1.op.authorization_endpoint=http://keycloak:8080/auth/realms/elasticsearch/protocol/openid-connect/auth
      - xpack.security.authc.realms.oidc.oidc1.op.token_endpoint=http://keycloak:8080/auth/realms/elasticsearch/protocol/openid-connect/token
      - xpack.security.authc.realms.oidc.oidc1.op.jwkset_path=/usr/share/elasticsearch/data/jwkset.json
      - xpack.security.authc.realms.oidc.oidc1.op.userinfo_endpoint=http://keycloak:8080/auth/realms/elasticsearch/protocol/openid-connect/userinfo
      - xpack.security.authc.realms.oidc.oidc1.op.endsession_endpoint=http://keycloak:8080/auth/realms/elasticsearch/protocol/openid-connect/logout
      - xpack.security.authc.realms.oidc.oidc1.claims.principal=sub
      - xpack.security.authc.realms.oidc.oidc1.claims.groups=groups
      - xpack.security.authc.realms.jwt.jwt1.order=3
      - xpack.security.authc.realms.jwt.jwt1.client_authentication.type=none
      - xpack.security.authc.realms.jwt.jwt1.allowed_issuer="http://keycloak:8080/auth/realms/elasticsearch"
      - xpack.security.authc.realms.jwt.jwt1.allowed_audiences="account"
      - xpack.security.authc.realms.jwt.jwt1.allowed_signature_algorithms=[RS256,HS256]
#      - xpack.security.authc.realms.jwt.jwt1.pkc_jwkset_path=https://keycloak:8443/auth/realms/elasticsearch/protocol/openid-connect/certs
      - xpack.security.authc.realms.jwt.jwt1.pkc_jwkset_path=/usr/share/elasticsearch/data/jwkset.json
      - xpack.security.authc.realms.jwt.jwt1.claims.principal=sub
      - xpack.security.authc.realms.jwt.jwt1.claims.groups=groups
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ./volumes/elasticsearch-data:/usr/share/elasticsearch/data
#      - ./volumes/elasticsearch-config:/usr/share/elasticsearch/config/addition_config
    ports:
      - 9200:9200
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.4.2
    restart: always
    volumes:
      - ./volumes/kibana-config/kibana.yml:/usr/share/kibana/config/kibana.yml
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:legacy
    environment:
      - DB_VENDOR=POSTGRES
      - DB_ADDR=postgres
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_SCHEMA=public
      - DB_PASSWORD=password
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=password
#      - KC_HTTPS_CERTIFICATE_FILE=/opt/jboss/keycloak/imports/server.crt.pem
#      - KC_HTTPS_CERTIFICATE_KEY=/opt/jboss/keycloak/imports/server.key.pem
    command: 
      - "-b 0.0.0.0 -Dkeycloak.import=/opt/jboss/keycloak/imports/realm-export.json"
    volumes:
      - ./volumes/keycloak-config:/opt/jboss/keycloak/imports
    ports:
      - 8080:8080
      - 8443:8443
    depends_on:
      - postgres
  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - ./volumes/postgres-data:/var/lib/postgresql/data
      - ./volumes/postgres-init:/docker-entrypoint-initdb.d/
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    container_name: minio
    image: minio/minio:latest
    volumes:
      - ./volumes/minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
#      MINIO_ETCD_ENDPOINTS: http://etcd:2379
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_IDENTITY_OPENID_CONFIG_URL=http://keycloak:8080/auth/realms/elasticsearch/.well-known/openid-configuration
      - MINIO_IDENTITY_OPENID_CLIENT_ID=minio
      - MINIO_IDENTITY_OPENID_CLIENT_SECRET=aTdoRUjGK2Cjlum7Lpa0x3W5AYmKxXBa
      - MINIO_IDENTITY_OPENID_SCOPES=openid
      - MINIO_IDENTITY_OPENID_CLAIM_NAME=groups
    command: "server /data --address minio:9000 --console-address minio:9001"
#    command: "gateway nas /data --address minio:9000 --console-address minio:9001"

  # Kafka Setup

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  broker:
    image: confluentinc/cp-server:7.2.2
    hostname: broker
    container_name: broker
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://broker:29092,PLAINTEXT_HOST://host.docker.internal:9092
      - KAFKA_METRIC_REPORTERS=io.confluent.metrics.reporter.ConfluentMetricsReporter
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_JMX_PORT=9101
      - KAFKA_JMX_HOSTNAME=localhost
      - KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL=http://schema-registry:8081
      - CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS=broker:29092
      - CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS=1
      - CONFLUENT_METRICS_ENABLE=true
      - CONFLUENT_SUPPORT_CUSTOMER_ID=anonymous

  schema-registry:
    image: confluentinc/cp-schema-registry:7.2.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      - SCHEMA_REGISTRY_HOST_NAME=schema-registry
      - SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS=broker:29092
      - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
#  control-center:
#    image: confluentinc/cp-enterprise-control-center:7.2.2
#    hostname: control-center
#    container_name: control-center
#    depends_on:
#      - broker
#      - schema-registry
#      - connect
#      - ksqldb-server
#    ports:
#      - "9021:9021"
#    environment:
#      - CONTROL_CENTER_BOOTSTRAP_SERVERS=broker:29092
#      - CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER=connect:8083
#      - CONTROL_CENTER_KSQL_KSQLDB1_URL=http://ksqldb-server:8088
#      - CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL=http://localhost:8088
#      - CONTROL_CENTER_SCHEMA_REGISTRY_URL=http://schema-registry:8081
#      - CONTROL_CENTER_REPLICATION_FACTOR=1
#      - CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS=1
#      - CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS=1
#      - CONFLUENT_METRICS_TOPIC_REPLICATION=1
#      - PORT=9021
